Примеры взяты из курса Алишева "Продвинутая Джава".
Главный поток - main.\
Остальные потоки все будут отпочковываться от главного потока.\
Класс Thread лежит в пакете java.lang\
Программа завершает свое исполнение, когда заканчивают работу все потоки исполнения.\
### Спосоы создания потоков ###
Как можно создать поток (пакет  Intro)
1) Можно унаследоваться от класса Thread,потомок будет являться потоком 
2) Можно Создать имплементацию интерфейса Runnable,положить объект реализации в конструктор экземпляра класса Thread.
3) Создать пул потоков (ExecutorService) с помощью статического метода  класса Executors
   ExecutorService executorService = Executors.newFixedThreadPool(2); // пул из 2  потоков.

### Volatile ###
**volatile** - изменчивый, подверженный изменению.\
Ключевое слово ***volatile***, необходимо когда одна переменная используется несколькими потоками(когда один поток пишет
в эту переменную, один или несколько - читают эту переменную.)\
C помощью volatile можно настроить синхронизацию потоков.\
Проблема когерентности кэшей ядер : когда значение переменной разное в кэшах ядер и информация не синхронна по
переменной.\
Если мы помечаем переменную словом volatile, это значит, что данная переменная не будет кэшироваться, а будет лежать
в общей памяти.(гарантирует когерентность кэшей ядер процессора) (пример в коде).\
Еще одна трактовка: "Что касается volatile переменных, то запись таких переменных производится в основную память, минуя 
локальную. и чтение volatile переменной производится также из основной памяти, то есть значение переменной не может 
сохраняться в регистрах или локальной памяти потока и операция чтения этой переменной гарантированно вернёт последнее 
записанное в неё значение."


### Synchronized ###
Если потоки делят общую переменную и одновременно записывают туда данные, то volatile не подойдет, нужно использовать
ключевое слово **synchrinized** используется в потоках для того, чтобы не было конкуренции в записи у потоков, только 
один поток мог работать с телом метода,в котором прописано слово synchronized  используется в методах\
Каждому объекту в Java присваивается определенная сущность, и эта сущность в определенный момент времени может быть 
только у одного потока. И ключевое слово **synchrinized** использует эту особенность (monitor lock) - только один поток 
может завладеть "монитором" одного объекта.

### synchronized block ###(пример в коде) 
Блок кода ,ограниченный фигурными скобками в которых прописано synchronized() выполняется строго одним потоком, хотя 
остальное тело объемлющего метода может выполняться  другими потоками.


### Join ###
Метод join позволяет дождаться окончания работы потока, который вызвал этот метод и продолжить выполнять свою работу в
текущем потоке







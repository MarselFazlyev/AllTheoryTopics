**Object-Relation Mapping** - перевод "Отображение объектов в таблице " и наоборот.
**Hibernate** - ORM- библиотека, реализация этого ORM,автоматизирует отображение объектов в таблицы и наоборот.
Преимущество в том,что Hibernate берет на себя написание SQL- запросов для манипуляций с базой данных.\
Чтобы сделать запрос из Hibernate, нам необходимо создать сессию.
**Сессия**- объект для взаимодействия с Hibernate,когда мы что-то хотим получить из Hibernate,получаем сессию.\
Объект Session получаем из объекта SessionFactory(паттерн Фабрика).\
На объекте Session можно вызывать

- save/persistance
- update
- get
- ...
  Примеры есть в коде модуля Hibernate

### Транзакция ###

**Транзакция** - единица работы с БД (Начали транзакцию ->работа с БД-> завершили транзакцию)\

Транзакции необходимы для поддержания согласованности данных в таблице\
Транзакции могут блокировать доступ к БД.Примеры :

- пока я пишу в таблицу не читай значения из нее
- пока я обновляю человека его нельзя обновлять
- пока я удаляю строки в таблице нельзя получить все строки из таблицы

Транзакции иожно применять (COMMIT) и откатывать (ROLLBACK)
Стандартной проблемой является состояние гонки. Несколько потоков изменяют один и тот же обьект одномоментно - неоходимо
синхронизировать потоки (обычно с помощбю блокировкок) ->(**Транзакции с разным уровнем изоляции**)

Для того, чтобы работать с Hibernate:

1) нужно подключить сам Hibernate и PostgreSQLDriver, так как Hibernate использует
   для своей работы низкоуровневый JDBC.
2) Нужно создать конфигурационный файл **hibernate.properties** (называться должен именно так!!!)-> поместить его в
   папку resources в структуре maven.

В файле **hibernate.properties** необхоимо прописать 2 вещи :

- конфигурацию источника данных (конфигурацию JDBC драйвера)

# Конфигурация источника данных (DataSource)

hibernate.driver_class=org.postgresql.Driver ( JDBC драйвер)
hibernate.connection.url= jdbc:postgreSQL://localhost:5432/hibernate_demo_db (url базы данных)
hibernate.connection.username = postgres
hibernate.connection.password = postgres

- конфигурацию самого HIbernate
  hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect (тип СУБД)
  hibernate.show_sql = true (позволяет видеть в консоли , какой запрос SQL сгенерировал Hibernate в базу данных )
  hibernate.current_session_context_classes=thread

Kлассы - сущности, с которыми предстоит работать в базе данных с помощью Hibernate,обычно хранятся в папке **model**

## Основные аннотации,применямые Hibernate

1) **@Entity** - указывает,что данный класс является сущностью, и может быть отображен в БД (Между классом с аннотацией
   @Entity и таблицей ,аналогичной названи класса будет связь).

   Все,классы,помеченные аннотацией @Entity,обяательно должны иметь пустой конструктор, и должны иметь хотя бы одно поле
   с аннотацией **@Id**.
2) **@Table** - в аргументе данной аннотации прописывается название таблицы, связанной с данным классом (нужна больше
   для
   подстраховки от изменения названия таблицы).
3) **@Column** используется для сопоставления полей класса,помеченного аннотацией @Entity, столбцам в таблице. В
   аргументе аннотации казывается название соответствующего столбца в таблице.
4) **@Id** Над полем "id" должна навеситься аннотация @Id. Дает понять Hibernate, что данное поле соответствует колонке
   id (первичному ключу) в таблице.
5) **@eneratedValue** аннотация,которая показывает,что данное поле будет сгенерировано автоматически самой СУБД.
   Необходимо
   в аргументы передать стратегию выбора типа генерируемого значения.

## HQL
**HQL** - был разработан,чтобы мы не спускались  до уровня таблиц, а делали запрос, используя наши сущности (Java классы)
1) Конвертируется в SQL
2) В Hibernate можно использовать и обычный SQL для сложных запросов, но лучше HQL.
3) Spring приложение - это обычно комбинация Hibernate(+Spring Data JPA) и SQL для нестандартных запросов
Основное различие с SQL в том, что HQL использует сущность (Java класс) для запроса в БД (он ничего "не знает" о таблицах в БД),никак
не взаимодействует с БД, а SQL работает напрямуюс БД.
























